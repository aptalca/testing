{"version":3,"sources":["webpack:///./src/assets/images/platforms/ios.svg","webpack:///./node_modules/date-fns/esm/differenceInCalendarMonths/index.js","webpack:///./node_modules/date-fns/esm/differenceInMonths/index.js","webpack:///./src/assets/images/platforms/tivo.svg","webpack:///./src/assets/images/platforms/gtv.svg","webpack:///./src/assets/images/platforms/plexamp.svg","webpack:///./src/assets/images/platforms/android.svg","webpack:///./node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","webpack:///./src/assets/images/platforms/plex.svg","webpack:///./node_modules/date-fns/esm/compareAsc/index.js","webpack:///./src/utils/plexplatformmap.js","webpack:///./node_modules/date-fns/esm/differenceInMilliseconds/index.js","webpack:///./src/assets/images/platforms/ie.svg","webpack:///./src/assets/images/platforms/chromecast.svg","webpack:///./src/assets/images/platforms sync ^\\.\\/.*\\.svg$","webpack:///./src/assets/images/platforms/roku.svg","webpack:///./src/assets/images/platforms/default.svg","webpack:///./src/assets/images/platforms/playstation.svg","webpack:///./src/assets/images/platforms/wiiu.svg","webpack:///./node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js","webpack:///./node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js","webpack:///./node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js","webpack:///./node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js","webpack:///./node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/_lib/match/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/index.js","webpack:///./node_modules/date-fns/esm/_lib/requiredArgs/index.js","webpack:///./src/assets/images/platforms/atv.svg","webpack:///./src/assets/images/platforms/synclounge.svg","webpack:///./node_modules/date-fns/esm/differenceInSeconds/index.js","webpack:///./src/assets/images/platforms/xbox.svg","webpack:///./src/assets/images/platforms/chrome.svg","webpack:///./src/assets/images/platforms/firefox.svg","webpack:///./src/assets/images/platforms/opera.svg","webpack:///./src/assets/images/platforms/kodi.svg","webpack:///./src/assets/images/platforms/cloudsync.svg","webpack:///./src/assets/images/platforms/macos.svg","webpack:///./src/assets/images/platforms/windows.svg","webpack:///./node_modules/date-fns/esm/parseISO/index.js","webpack:///./src/assets/images/platforms/safari.svg","webpack:///./node_modules/date-fns/esm/_lib/assign/index.js","webpack:///./node_modules/date-fns/esm/_lib/cloneObject/index.js","webpack:///./node_modules/date-fns/esm/formatDistance/index.js","webpack:///./node_modules/date-fns/esm/formatDistanceToNow/index.js","webpack:///./src/assets/images/platforms/linux.svg","webpack:///./src/assets/images/platforms/msedge.svg","webpack:///./src/assets/images/platforms/dlna.svg","webpack:///./src/assets/images/platforms/samsung.svg","webpack:///./node_modules/date-fns/esm/toDate/index.js","webpack:///./node_modules/date-fns/esm/_lib/toInteger/index.js"],"names":["module","exports","differenceInCalendarMonths","dirtyDateLeft","dirtyDateRight","requiredArgs","arguments","dateLeft","toDate","dateRight","yearDiff","getFullYear","monthDiff","getMonth","differenceInMonths","sign","compareAsc","difference","Math","abs","setMonth","isLastMonthNotFull","result","MILLISECONDS_IN_MINUTE","getDateMillisecondsPart","date","getTime","getTimezoneOffsetInMilliseconds","dirtyDate","Date","baseTimezoneOffset","ceil","getTimezoneOffset","setSeconds","hasNegativeUTCOffset","millisecondsPartOfTimezoneOffset","diff","plexPlatformMap","android","chrome","chromecast","dlna","firefox","ios","ipad","iphone","kodi","linux","nexus","macos","opera","osx","playstation","plexamp","plextogether","roku","safari","samsung","synclounge","tivo","tizen","tvos","vizio","wiiu","windows","xbmc","xbox","differenceInMilliseconds","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","formatDistance","token","count","options","replace","addSuffix","comparison","buildFormatLongFn","args","dirtyOptions","width","String","defaultWidth","format","formats","dateFormats","full","long","medium","short","timeFormats","dateTimeFormats","formatLong","time","dateTime","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","formatRelative","_date","_baseDate","_options","buildLocalizeFn","dirtyIndex","valuesArray","context","formattingValues","defaultFormattingWidth","_defaultWidth","_width","values","index","argumentCallback","eraValues","narrow","abbreviated","wide","quarterValues","monthValues","dayValues","dayPeriodValues","am","pm","midnight","noon","morning","afternoon","evening","night","formattingDayPeriodValues","ordinalNumber","dirtyNumber","_dirtyOptions","number","Number","rem100","localize","era","quarter","month","day","dayPeriod","buildMatchPatternFn","dirtyString","string","matchResult","match","matchPattern","matchedString","parseResult","parsePattern","value","valueCallback","rest","slice","length","buildMatchFn","matchPatterns","defaultMatchWidth","parsePatterns","defaultParseWidth","prototype","toString","call","findIndex","pattern","test","findKey","object","predicate","key","hasOwnProperty","array","matchOrdinalNumberPattern","parseOrdinalNumberPattern","matchEraPatterns","parseEraPatterns","any","matchQuarterPatterns","parseQuarterPatterns","matchMonthPatterns","parseMonthPatterns","matchDayPatterns","parseDayPatterns","matchDayPeriodPatterns","parseDayPeriodPatterns","parseInt","locale","weekStartsOn","firstWeekContainsDate","required","TypeError","differenceInSeconds","floor","MILLISECONDS_IN_HOUR","DEFAULT_ADDITIONAL_DIGITS","patterns","dateTimeDelimiter","timeZoneDelimiter","timezone","dateRegex","timeRegex","timezoneRegex","parseISO","argument","additionalDigits","RangeError","NaN","dateStrings","splitDateString","parseYearResult","parseYear","parseDate","restDateString","year","isNaN","offset","timestamp","parseTime","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","setFullYear","parseTimezone","dateString","timeString","split","substr","exec","regex","RegExp","captures","century","isWeekDate","dayOfYear","parseDateUnit","week","dayOfWeek","validateWeekDate","dayOfISOWeekYear","validateDate","validateDayOfYearDate","setUTCFullYear","max","hours","parseTimeUnit","minutes","seconds","validateTime","parseFloat","timezoneString","validateTimezone","isoWeekYear","fourthOfJanuaryDay","getUTCDay","setUTCDate","daysInMonths","isLeapYearIndex","_year","_hours","target","dirtyObject","property","cloneObject","MINUTES_IN_DAY","MINUTES_IN_ALMOST_TWO_DAYS","MINUTES_IN_MONTH","MINUTES_IN_TWO_MONTHS","dirtyBaseDate","localizeOptions","Boolean","months","offsetInSeconds","round","includeSeconds","days","nearestMonth","monthsSinceStartOfYear","years","formatDistanceToNow","now","argStr","console","warn","stack","toInteger"],"mappings":"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","file":"js/chunk-91dca3f0-legacy.4c0d7103.js","sourcesContent":["module.exports = __webpack_public_path__ + \"img/ios.2e1f039e.svg\";","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\n\nexport default function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();\n  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();\n  return yearDiff * 12 + monthDiff;\n}","import toDate from '../toDate/index.js';\nimport differenceInCalendarMonths from '../differenceInCalendarMonths/index.js';\nimport compareAsc from '../compareAsc/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\n\nexport default function differenceInMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));\n  dateLeft.setMonth(dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign;\n  var result = sign * (difference - isLastMonthNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","module.exports = __webpack_public_path__ + \"img/tivo.3691a117.svg\";","module.exports = __webpack_public_path__ + \"img/gtv.5c5e57ee.svg\";","module.exports = __webpack_public_path__ + \"img/plexamp.a59487a9.svg\";","module.exports = __webpack_public_path__ + \"img/android.f32394f9.svg\";","var MILLISECONDS_IN_MINUTE = 60000;\n\nfunction getDateMillisecondsPart(date) {\n  return date.getTime() % MILLISECONDS_IN_MINUTE;\n}\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\n\n\nexport default function getTimezoneOffsetInMilliseconds(dirtyDate) {\n  var date = new Date(dirtyDate.getTime());\n  var baseTimezoneOffset = Math.ceil(date.getTimezoneOffset());\n  date.setSeconds(0, 0);\n  var hasNegativeUTCOffset = baseTimezoneOffset > 0;\n  var millisecondsPartOfTimezoneOffset = hasNegativeUTCOffset ? (MILLISECONDS_IN_MINUTE + getDateMillisecondsPart(date)) % MILLISECONDS_IN_MINUTE : getDateMillisecondsPart(date);\n  return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;\n}","module.exports = __webpack_public_path__ + \"img/plex.f2656d43.svg\";","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * var result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * var result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\n\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","const plexPlatformMap = {\n  android: 'android',\n  'apple tv': 'atv',\n  chrome: 'chrome',\n  chromecast: 'chromecast',\n  dlna: 'dlna',\n  firefox: 'firefox',\n  'internet explorer': 'ie',\n  ios: 'ios',\n  ipad: 'ios',\n  iphone: 'ios',\n  kodi: 'kodi',\n  linux: 'linux',\n  nexus: 'android',\n  macos: 'macos',\n  'microsoft edge': 'msedge',\n  opera: 'opera',\n  osx: 'macos',\n  playstation: 'playstation',\n  'plex home theater': 'plex',\n  'plex media player': 'plex',\n  plexamp: 'plexamp',\n  plextogether: 'synclounge',\n  roku: 'roku',\n  safari: 'safari',\n  samsung: 'samsung',\n  synclounge: 'synclounge',\n  tivo: 'tivo',\n  tizen: 'samsung',\n  tvos: 'atv',\n  vizio: 'opera',\n  wiiu: 'wiiu',\n  windows: 'windows',\n  'windows phone': 'wp',\n  xbmc: 'xbmc',\n  xbox: 'xbox',\n};\n\nexport default plexPlatformMap;\n","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of milliseconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * var result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\n\nexport default function differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getTime() - dateRight.getTime();\n}","module.exports = __webpack_public_path__ + \"img/ie.f3380d01.svg\";","module.exports = __webpack_public_path__ + \"img/chromecast.bc7c377a.svg\";","var map = {\n\t\"./android.svg\": \"1679\",\n\t\"./atv.svg\": \"8e21\",\n\t\"./chrome.svg\": \"acda\",\n\t\"./chromecast.svg\": \"4950\",\n\t\"./cloudsync.svg\": \"dd27\",\n\t\"./default.svg\": \"75d5\",\n\t\"./dlna.svg\": \"f567\",\n\t\"./firefox.svg\": \"b1db\",\n\t\"./gtv.svg\": \"0d27\",\n\t\"./ie.svg\": \"3e24\",\n\t\"./ios.svg\": \"019d\",\n\t\"./kodi.svg\": \"d103\",\n\t\"./linux.svg\": \"f0bd\",\n\t\"./macos.svg\": \"dd58\",\n\t\"./msedge.svg\": \"f441\",\n\t\"./opera.svg\": \"c307\",\n\t\"./playstation.svg\": \"77c0\",\n\t\"./plex.svg\": \"258d\",\n\t\"./plexamp.svg\": \"0f14\",\n\t\"./roku.svg\": \"6d9a\",\n\t\"./safari.svg\": \"ea56\",\n\t\"./samsung.svg\": \"f84b\",\n\t\"./synclounge.svg\": \"9f98\",\n\t\"./tivo.svg\": \"0cd8\",\n\t\"./wiiu.svg\": \"7eab\",\n\t\"./windows.svg\": \"dfe9\",\n\t\"./xbox.svg\": \"abfa\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"5992\";","module.exports = __webpack_public_path__ + \"img/roku.65450053.svg\";","module.exports = __webpack_public_path__ + \"img/default.f2656d43.svg\";","module.exports = __webpack_public_path__ + \"img/playstation.6b83c93b.svg\";","module.exports = __webpack_public_path__ + \"img/wiiu.4c1946ed.svg\";","var formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'less than a second',\n    other: 'less than {{count}} seconds'\n  },\n  xSeconds: {\n    one: '1 second',\n    other: '{{count}} seconds'\n  },\n  halfAMinute: 'half a minute',\n  lessThanXMinutes: {\n    one: 'less than a minute',\n    other: 'less than {{count}} minutes'\n  },\n  xMinutes: {\n    one: '1 minute',\n    other: '{{count}} minutes'\n  },\n  aboutXHours: {\n    one: 'about 1 hour',\n    other: 'about {{count}} hours'\n  },\n  xHours: {\n    one: '1 hour',\n    other: '{{count}} hours'\n  },\n  xDays: {\n    one: '1 day',\n    other: '{{count}} days'\n  },\n  aboutXWeeks: {\n    one: 'about 1 week',\n    other: 'about {{count}} weeks'\n  },\n  xWeeks: {\n    one: '1 week',\n    other: '{{count}} weeks'\n  },\n  aboutXMonths: {\n    one: 'about 1 month',\n    other: 'about {{count}} months'\n  },\n  xMonths: {\n    one: '1 month',\n    other: '{{count}} months'\n  },\n  aboutXYears: {\n    one: 'about 1 year',\n    other: 'about {{count}} years'\n  },\n  xYears: {\n    one: '1 year',\n    other: '{{count}} years'\n  },\n  overXYears: {\n    one: 'over 1 year',\n    other: 'over {{count}} years'\n  },\n  almostXYears: {\n    one: 'almost 1 year',\n    other: 'almost {{count}} years'\n  }\n};\nexport default function formatDistance(token, count, options) {\n  options = options || {};\n  var result;\n\n  if (typeof formatDistanceLocale[token] === 'string') {\n    result = formatDistanceLocale[token];\n  } else if (count === 1) {\n    result = formatDistanceLocale[token].one;\n  } else {\n    result = formatDistanceLocale[token].other.replace('{{count}}', count);\n  }\n\n  if (options.addSuffix) {\n    if (options.comparison > 0) {\n      return 'in ' + result;\n    } else {\n      return result + ' ago';\n    }\n  }\n\n  return result;\n}","export default function buildFormatLongFn(args) {\n  return function (dirtyOptions) {\n    var options = dirtyOptions || {};\n    var width = options.width ? String(options.width) : args.defaultWidth;\n    var format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}","import buildFormatLongFn from '../../../_lib/buildFormatLongFn/index.js';\nvar dateFormats = {\n  full: 'EEEE, MMMM do, y',\n  long: 'MMMM do, y',\n  medium: 'MMM d, y',\n  short: 'MM/dd/yyyy'\n};\nvar timeFormats = {\n  full: 'h:mm:ss a zzzz',\n  long: 'h:mm:ss a z',\n  medium: 'h:mm:ss a',\n  short: 'h:mm a'\n};\nvar dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: '{{date}}, {{time}}',\n  short: '{{date}}, {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n};\nexport default formatLong;","var formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: 'P'\n};\nexport default function formatRelative(token, _date, _baseDate, _options) {\n  return formatRelativeLocale[token];\n}","export default function buildLocalizeFn(args) {\n  return function (dirtyIndex, dirtyOptions) {\n    var options = dirtyOptions || {};\n    var context = options.context ? String(options.context) : 'standalone';\n    var valuesArray;\n\n    if (context === 'formatting' && args.formattingValues) {\n      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      var width = options.width ? String(options.width) : defaultWidth;\n      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      var _defaultWidth = args.defaultWidth;\n\n      var _width = options.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[_width] || args.values[_defaultWidth];\n    }\n\n    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;\n    return valuesArray[index];\n  };\n}","import buildLocalizeFn from '../../../_lib/buildLocalizeFn/index.js';\nvar eraValues = {\n  narrow: ['B', 'A'],\n  abbreviated: ['BC', 'AD'],\n  wide: ['Before Christ', 'Anno Domini']\n};\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter'] // Note: in English, the names of days of the week and months are capitalized.\n  // If you are making a new locale based on this one, check if the same is true for the language you're working on.\n  // Generally, formatted dates should look like they are in the middle of a sentence,\n  // e.g. in Spanish language the weekdays and months should be in the lowercase.\n\n};\nvar monthValues = {\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\nvar dayValues = {\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n};\nvar dayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  }\n};\n\nfunction ordinalNumber(dirtyNumber, _dirtyOptions) {\n  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`:\n  //\n  //   var options = dirtyOptions || {}\n  //   var unit = String(options.unit)\n  //\n  // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'\n\n  var rem100 = number % 100;\n\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st';\n\n      case 2:\n        return number + 'nd';\n\n      case 3:\n        return number + 'rd';\n    }\n  }\n\n  return number + 'th';\n}\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function (quarter) {\n      return Number(quarter) - 1;\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n};\nexport default localize;","export default function buildMatchPatternFn(args) {\n  return function (dirtyString, dirtyOptions) {\n    var string = String(dirtyString);\n    var options = dirtyOptions || {};\n    var matchResult = string.match(args.matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parseResult = string.match(args.parsePattern);\n\n    if (!parseResult) {\n      return null;\n    }\n\n    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    return {\n      value: value,\n      rest: string.slice(matchedString.length)\n    };\n  };\n}","export default function buildMatchFn(args) {\n  return function (dirtyString, dirtyOptions) {\n    var string = String(dirtyString);\n    var options = dirtyOptions || {};\n    var width = options.width;\n    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n    var matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n    var value;\n\n    if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {\n      value = findIndex(parsePatterns, function (pattern) {\n        return pattern.test(matchedString);\n      });\n    } else {\n      value = findKey(parsePatterns, function (pattern) {\n        return pattern.test(matchedString);\n      });\n    }\n\n    value = args.valueCallback ? args.valueCallback(value) : value;\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    return {\n      value: value,\n      rest: string.slice(matchedString.length)\n    };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key) && predicate(object[key])) {\n      return key;\n    }\n  }\n}\n\nfunction findIndex(array, predicate) {\n  for (var key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n}","import buildMatchPatternFn from '../../../_lib/buildMatchPatternFn/index.js';\nimport buildMatchFn from '../../../_lib/buildMatchFn/index.js';\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i\n};\nvar parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i]\n};\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n};\nvar matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nvar parseMonthPatterns = {\n  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],\n  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]\n};\nvar matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nvar parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n};\nvar matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i\n  }\n};\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function (value) {\n      return parseInt(value, 10);\n    }\n  }),\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function (index) {\n      return index + 1;\n    }\n  }),\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'any',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\nexport default match;","import formatDistance from './_lib/formatDistance/index.js';\nimport formatLong from './_lib/formatLong/index.js';\nimport formatRelative from './_lib/formatRelative/index.js';\nimport localize from './_lib/localize/index.js';\nimport match from './_lib/match/index.js';\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n */\n\nvar locale = {\n  code: 'en-US',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0\n    /* Sunday */\n    ,\n    firstWeekContainsDate: 1\n  }\n};\nexport default locale;","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","module.exports = __webpack_public_path__ + \"img/atv.f7af98fe.svg\";","module.exports = __webpack_public_path__ + \"img/synclounge.bcdff3df.svg\";","import differenceInMilliseconds from '../differenceInMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of seconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * var result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\n\nexport default function differenceInSeconds(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / 1000;\n  return diff > 0 ? Math.floor(diff) : Math.ceil(diff);\n}","module.exports = __webpack_public_path__ + \"img/xbox.9198c9a8.svg\";","module.exports = __webpack_public_path__ + \"img/chrome.c1c7be71.svg\";","module.exports = __webpack_public_path__ + \"img/firefox.d3750b05.svg\";","module.exports = __webpack_public_path__ + \"img/opera.545cf86d.svg\";","module.exports = __webpack_public_path__ + \"img/kodi.d2d38145.svg\";","module.exports = __webpack_public_path__ + \"img/cloudsync.9bdcc651.svg\";","module.exports = __webpack_public_path__ + \"img/macos.95812f03.svg\";","module.exports = __webpack_public_path__ + \"img/windows.bfc23ab1.svg\";","import toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar DEFAULT_ADDITIONAL_DIGITS = 2;\nvar patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/\n};\nvar dateRegex = /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nvar timeRegex = /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nvar timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The previous `parse` implementation was renamed to `parseISO`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   parseISO('2016-01-01')\n *   ```\n *\n * - `parseISO` now validates separate date and time values in ISO-8601 strings\n *   and returns `Invalid Date` if the date is invalid.\n *\n *   ```javascript\n *   parseISO('2018-13-32')\n *   //=> Invalid Date\n *   ```\n *\n * - `parseISO` now doesn't fall back to `new Date` constructor\n *   if it fails to parse a string argument. Instead, it returns `Invalid Date`.\n *\n * @param {String} argument - the value to convert\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nexport default function parseISO(argument, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : toInteger(options.additionalDigits);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  }\n\n  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var date;\n\n  if (dateStrings.date) {\n    var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (isNaN(date) || !date) {\n    return new Date(NaN);\n  }\n\n  var timestamp = date.getTime();\n  var time = 0;\n  var offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n\n    if (isNaN(time) || time === null) {\n      return new Date(NaN);\n    }\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    var dirtyDate = new Date(timestamp + time); // js parsed string assuming it's in UTC timezone\n    // but we need it to be parsed in our timezone\n    // so we use utc values to build date in our timezone.\n    // Year values from 0 to 99 map to the years 1900 to 1999\n    // so set year explicitly with setFullYear.\n\n    var result = new Date(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate(), dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());\n    result.setFullYear(dirtyDate.getUTCFullYear());\n    return result;\n  }\n\n  return new Date(timestamp + time + offset);\n}\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimiter);\n  var timeString; // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    dateStrings.date = null;\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var regex = new RegExp('^(?:(\\\\d{4}|[+-]\\\\d{' + (4 + additionalDigits) + '})|(\\\\d{2}|[+-]\\\\d{' + (2 + additionalDigits) + '})$)');\n  var captures = dateString.match(regex); // Invalid ISO-formatted year\n\n  if (!captures) return {\n    year: null\n  };\n  var year = captures[1] && parseInt(captures[1]);\n  var century = captures[2] && parseInt(captures[2]);\n  return {\n    year: century == null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length)\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return null;\n  var captures = dateString.match(dateRegex); // Invalid ISO-formatted string\n\n  if (!captures) return null;\n  var isWeekDate = !!captures[4];\n  var dayOfYear = parseDateUnit(captures[1]);\n  var month = parseDateUnit(captures[2]) - 1;\n  var day = parseDateUnit(captures[3]);\n  var week = parseDateUnit(captures[4]);\n  var dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    var date = new Date(0);\n\n    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  var captures = timeString.match(timeRegex);\n  if (!captures) return null; // Invalid ISO-formatted time\n\n  var hours = parseTimeUnit(captures[1]);\n  var minutes = parseTimeUnit(captures[2]);\n  var seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n}\n\nfunction parseTimeUnit(value) {\n  return value && parseFloat(value.replace(',', '.')) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === 'Z') return 0;\n  var captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n  var sign = captures[1] === '+' ? -1 : 1;\n  var hours = parseInt(captures[2]);\n  var minutes = captures[3] && parseInt(captures[3]) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n// February is null to handle the leap year (using ||)\n\n\nvar daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100;\n}\n\nfunction validateDate(year, month, date) {\n  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}","module.exports = __webpack_public_path__ + \"img/safari.b588d1bf.svg\";","export default function assign(target, dirtyObject) {\n  if (target == null) {\n    throw new TypeError('assign requires that input parameter not be null or undefined');\n  }\n\n  dirtyObject = dirtyObject || {};\n\n  for (var property in dirtyObject) {\n    if (dirtyObject.hasOwnProperty(property)) {\n      target[property] = dirtyObject[property];\n    }\n  }\n\n  return target;\n}","import assign from '../assign/index.js';\nexport default function cloneObject(dirtyObject) {\n  return assign({}, dirtyObject);\n}","import compareAsc from '../compareAsc/index.js';\nimport differenceInMonths from '../differenceInMonths/index.js';\nimport differenceInSeconds from '../differenceInSeconds/index.js';\nimport defaultLocale from '../locale/en-US/index.js';\nimport toDate from '../toDate/index.js';\nimport cloneObject from '../_lib/cloneObject/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MINUTES_IN_DAY = 1440;\nvar MINUTES_IN_ALMOST_TWO_DAYS = 2520;\nvar MINUTES_IN_MONTH = 43200;\nvar MINUTES_IN_TWO_MONTHS = 86400;\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `distanceInWords ` to `formatDistance`\n *   to make its name consistent with `format` and `formatRelative`.\n *\n * - The order of arguments is swapped to make the function\n *   consistent with `differenceIn...` functions.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWords(\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     new Date(1986, 3, 4, 11, 32, 0),\n *     { addSuffix: true }\n *   ) //=> 'in about 1 hour'\n *\n *   // v2.0.0 onward\n *\n *   formatDistance(\n *     new Date(1986, 3, 4, 11, 32, 0),\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     { addSuffix: true }\n *   ) //=> 'in about 1 hour'\n *   ```\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * var result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * var result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * var result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\n\nexport default function formatDistance(dirtyDate, dirtyBaseDate, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain formatDistance property');\n  }\n\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var localizeOptions = cloneObject(options);\n  localizeOptions.addSuffix = Boolean(options.addSuffix);\n  localizeOptions.comparison = comparison;\n  var dateLeft;\n  var dateRight;\n\n  if (comparison > 0) {\n    dateLeft = toDate(dirtyBaseDate);\n    dateRight = toDate(dirtyDate);\n  } else {\n    dateLeft = toDate(dirtyDate);\n    dateRight = toDate(dirtyBaseDate);\n  }\n\n  var seconds = differenceInSeconds(dateRight, dateLeft);\n  var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1000;\n  var minutes = Math.round((seconds - offsetInSeconds) / 60);\n  var months; // 0 up to 2 mins\n\n  if (minutes < 2) {\n    if (options.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance('lessThanXSeconds', 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance('lessThanXSeconds', 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance('lessThanXSeconds', 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance('halfAMinute', null, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', minutes, localizeOptions);\n      }\n    } // 2 mins up to 0.75 hrs\n\n  } else if (minutes < 45) {\n    return locale.formatDistance('xMinutes', minutes, localizeOptions); // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance('aboutXHours', 1, localizeOptions); // 1.5 hrs up to 24 hrs\n  } else if (minutes < MINUTES_IN_DAY) {\n    var hours = Math.round(minutes / 60);\n    return locale.formatDistance('aboutXHours', hours, localizeOptions); // 1 day up to 1.75 days\n  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {\n    return locale.formatDistance('xDays', 1, localizeOptions); // 1.75 days up to 30 days\n  } else if (minutes < MINUTES_IN_MONTH) {\n    var days = Math.round(minutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 month up to 2 months\n  } else if (minutes < MINUTES_IN_TWO_MONTHS) {\n    months = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('aboutXMonths', months, localizeOptions);\n  }\n\n  months = differenceInMonths(dateRight, dateLeft); // 2 months up to 12 months\n\n  if (months < 12) {\n    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('xMonths', nearestMonth, localizeOptions); // 1 year up to max Date\n  } else {\n    var monthsSinceStartOfYear = months % 12;\n    var years = Math.floor(months / 12); // N years up to 1 years 3 months\n\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance('aboutXYears', years, localizeOptions); // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance('overXYears', years, localizeOptions); // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance('almostXYears', years + 1, localizeOptions);\n    }\n  }\n}","import distanceInWords from '../formatDistance/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name formatDistanceToNow\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n * @pure false\n *\n * @description\n * Return the distance between the given date and now in words.\n *\n * | Distance to now                                                   | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance to now     | Result               |\n * |---------------------|----------------------|\n * | 0 secs ... 5 secs   | less than 5 seconds  |\n * | 5 secs ... 10 secs  | less than 10 seconds |\n * | 10 secs ... 20 secs | less than 20 seconds |\n * | 20 secs ... 40 secs | half a minute        |\n * | 40 secs ... 60 secs | less than a minute   |\n * | 60 secs ... 90 secs | 1 minute             |\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `distanceInWordsToNow ` to `formatDistanceToNow`\n *   to make its name consistent with `format` and `formatRelative`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsToNow(new Date(2014, 6, 2), { addSuffix: true })\n *   //=> 'in 6 months'\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceToNow(new Date(2014, 6, 2), { addSuffix: true })\n *   //=> 'in 6 months'\n *   ```\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - the object with options\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result specifies if now is earlier or later than the passed date\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * var result = formatDistanceToNow(\n *   new Date(2014, 6, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * var result = formatDistanceToNow(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   {includeSeconds: true}\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * var result = formatDistanceToNow(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'in about 1 year'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 August 2016 in Esperanto?\n * var eoLocale = require('date-fns/locale/eo')\n * var result = formatDistanceToNow(\n *   new Date(2016, 7, 1),\n *   {locale: eoLocale}\n * )\n * //=> 'pli ol 1 jaro'\n */\n\nexport default function formatDistanceToNow(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  return distanceInWords(dirtyDate, Date.now(), dirtyOptions);\n}","module.exports = __webpack_public_path__ + \"img/linux.aae89f56.svg\";","module.exports = __webpack_public_path__ + \"img/msedge.6b2ae055.svg\";","module.exports = __webpack_public_path__ + \"img/dlna.de153eb8.svg\";","module.exports = __webpack_public_path__ + \"img/samsung.4f1826b5.svg\";","import requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}"],"sourceRoot":""}