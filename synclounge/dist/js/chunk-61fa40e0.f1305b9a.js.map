{"version":3,"sources":["webpack:///./node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","webpack:///./src/utils/xmlutils.js","webpack:///./node_modules/fast-xml-parser/src/xmlNode.js","webpack:///./node_modules/fast-xml-parser/src/validator.js","webpack:///./node_modules/fast-xml-parser/src/parser.js","webpack:///./node_modules/fast-xml-parser/src/node2json.js","webpack:///./node_modules/fast-xml-parser/src/json2xml.js","webpack:///./node_modules/fast-xml-parser/src/node2json_str.js","webpack:///./node_modules/fast-xml-parser/src/nimndata.js","webpack:///./node_modules/fast-xml-parser/src/util.js"],"names":["util","buildOptions","xmlNode","replace","nameRegexp","Number","parseInt","window","parseFloat","defaultOptions","attributeNamePrefix","attrNodeName","textNodeName","ignoreAttributes","ignoreNameSpace","allowBooleanAttributes","parseNodeValue","parseAttributeValue","arrayMode","trimValues","cdataTagName","cdataPositionChar","tagValueProcessor","a","tagName","attrValueProcessor","attrName","stopNodes","exports","props","processTagValue","val","options","trim","parseValue","parseTrueNumberOnly","resolveNameSpace","tagname","tags","split","prefix","charAt","length","shouldParse","parsed","isNaN","indexOf","String","isExist","attrsRegx","RegExp","buildAttributesMap","attrStr","matches","getAllMatches","len","attrs","i","undefined","Object","keys","attrCollection","getTraversalObj","xmlData","xmlObj","currentNode","textData","ch","closeIndex","findClosingIndex","substring","colonIndex","substr","getValue","includes","child","attrsMap","startIndex","parent","tagExp","childNode","addChild","result","closingIndexForOpeningTag","data","index","separatorIndex","trimRight","lastIndexOf","attrBoundary","str","errMsg","closingIndex","Error","parse","xml","parser","module","this","Array","isArray","push","readPI","start","getErrorObject","getLineNumberForPosition","readCommentAndCDATA","angleBracketsCount","validate","tagFound","reachedRoot","err","closingTag","validateTagName","msg","readAttributeStr","value","isValid","validateAttributeString","code","line","tagClosed","otg","pop","afterAmp","validateAmpersand","JSON","stringify","doubleQuote","singleQuote","startChar","validAttrStrRegxp","attrNames","getPositionFromMatch","validateAttrName","hasOwnProperty","validateNumberAmpersand","re","match","count","message","lineNumber","isName","lines","nodeToJson","xmlToNodeobj","x2xmlnode","validator","validationOption","traversableObj","convertToJson","convertTonimn","convert2nimn","convertToJsonString","j2xParser","parseToNimn","schema","node","jObj","isEmptyObject","merge","tag","format","indentBy","supressEmptyNode","Parser","isAttribute","attrPrefixLen","isCDATA","replaceCDATAstr","replaceCDATAarr","indentate","tagEndChar","newLine","buildTextNode","buildEmptyTextNode","buildObjNode","buildEmptyObjNode","buildTextValNode","buildObjectNode","cdata","join","v","key","level","repeat","name","startsWith","prototype","j2x","Date","attr","arrLen","j","item","Ks","L","x2j","_cToJsonStr","stringval","char","fromCharCode","chars","nilChar","missingChar","nilPremitive","missingPremitive","emptyChar","emptyValue","boundryChar","objStart","arrStart","arrayEnd","charsArr","_e","e_schema","hasValidData","hasData","itemSchema","arr_len","arr_i","r","processValue","isAppChar","nameStartChar","nameChar","regexName","string","regex","exec","allmatches","obj","target","newOptions"],"mappings":"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","file":"js/chunk-61fa40e0.f1305b9a.js","sourcesContent":["'use strict';\n\nconst util = require('./util');\nconst buildOptions = require('./util').buildOptions;\nconst xmlNode = require('./xmlNode');\nconst regx =\n  '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n  .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n  Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n  Number.parseFloat = window.parseFloat;\n}\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attrNodeName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  ignoreNameSpace: false,\n  allowBooleanAttributes: false, //a tag can have attributes without any value\n  //ignoreRootElement : false,\n  parseNodeValue: true,\n  parseAttributeValue: false,\n  arrayMode: false,\n  trimValues: true, //Trim string values of tag and attributes\n  cdataTagName: false,\n  cdataPositionChar: '\\\\c',\n  tagValueProcessor: function(a, tagName) {\n    return a;\n  },\n  attrValueProcessor: function(a, attrName) {\n    return a;\n  },\n  stopNodes: []\n  //decodeStrict: false,\n};\n\nexports.defaultOptions = defaultOptions;\n\nconst props = [\n  'attributeNamePrefix',\n  'attrNodeName',\n  'textNodeName',\n  'ignoreAttributes',\n  'ignoreNameSpace',\n  'allowBooleanAttributes',\n  'parseNodeValue',\n  'parseAttributeValue',\n  'arrayMode',\n  'trimValues',\n  'cdataTagName',\n  'cdataPositionChar',\n  'tagValueProcessor',\n  'attrValueProcessor',\n  'parseTrueNumberOnly',\n  'stopNodes'\n];\nexports.props = props;\n\n/**\n * Trim -> valueProcessor -> parse value\n * @param {string} tagName\n * @param {string} val\n * @param {object} options\n */\nfunction processTagValue(tagName, val, options) {\n  if (val) {\n    if (options.trimValues) {\n      val = val.trim();\n    }\n    val = options.tagValueProcessor(val, tagName);\n    val = parseValue(val, options.parseNodeValue, options.parseTrueNumberOnly);\n  }\n\n  return val;\n}\n\nfunction resolveNameSpace(tagname, options) {\n  if (options.ignoreNameSpace) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\nfunction parseValue(val, shouldParse, parseTrueNumberOnly) {\n  if (shouldParse && typeof val === 'string') {\n    let parsed;\n    if (val.trim() === '' || isNaN(val)) {\n      parsed = val === 'true' ? true : val === 'false' ? false : val;\n    } else {\n      if (val.indexOf('0x') !== -1) {\n        //support hexa decimal\n        parsed = Number.parseInt(val, 16);\n      } else if (val.indexOf('.') !== -1) {\n        parsed = Number.parseFloat(val);\n        val = val.replace(/\\.?0+$/, \"\");\n      } else {\n        parsed = Number.parseInt(val, 10);\n      }\n      if (parseTrueNumberOnly) {\n        parsed = String(parsed) === val ? parsed : val;\n      }\n    }\n    return parsed;\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])(.*?)\\\\3)?', 'g');\n\nfunction buildAttributesMap(attrStr, options) {\n  if (!options.ignoreAttributes && typeof attrStr === 'string') {\n    attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = resolveNameSpace(matches[i][1], options);\n      if (attrName.length) {\n        if (matches[i][4] !== undefined) {\n          if (options.trimValues) {\n            matches[i][4] = matches[i][4].trim();\n          }\n          matches[i][4] = options.attrValueProcessor(matches[i][4], attrName);\n          attrs[options.attributeNamePrefix + attrName] = parseValue(\n            matches[i][4],\n            options.parseAttributeValue,\n            options.parseTrueNumberOnly\n          );\n        } else if (options.allowBooleanAttributes) {\n          attrs[options.attributeNamePrefix + attrName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (options.attrNodeName) {\n      const attrCollection = {};\n      attrCollection[options.attrNodeName] = attrs;\n      return attrCollection;\n    }\n    return attrs;\n  }\n}\n\nconst getTraversalObj = function(xmlData, options) {\n  xmlData = xmlData.replace(/(\\r\\n)|\\n/, \" \");\n  options = buildOptions(options, defaultOptions, props);\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n\n//function match(xmlData){\n  for(let i=0; i< xmlData.length; i++){\n    const ch = xmlData[i];\n    if(ch === '<'){\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(options.ignoreNameSpace){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        /* if (currentNode.parent) {\n          currentNode.parent.val = util.getValue(currentNode.parent.val) + '' + processTagValue2(tagName, textData , options);\n        } */\n        if(currentNode){\n          if(currentNode.val){\n            currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(tagName, textData , options);\n          }else{\n            currentNode.val = processTagValue(tagName, textData , options);\n          }\n        }\n\n        if (options.stopNodes.length && options.stopNodes.includes(currentNode.tagname)) {\n          currentNode.child = []\n          if (currentNode.attrsMap == undefined) { currentNode.attrsMap = {}}\n          currentNode.val = xmlData.substr(currentNode.startIndex + 1, i - currentNode.startIndex - 1)\n        }\n        currentNode = currentNode.parent;\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n        i = findClosingIndex(xmlData, \"?>\", i, \"Pi Tag is not closed.\")\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        i = findClosingIndex(xmlData, \"-->\", i, \"Comment is not closed.\")\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"DOCTYPE is not closed.\")\n        const tagExp = xmlData.substring(i, closeIndex);\n        if(tagExp.indexOf(\"[\") >= 0){\n          i = xmlData.indexOf(\"]>\", i) + 1;\n        }else{\n          i = closeIndex;\n        }\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        //considerations\n        //1. CDATA will always have parent node\n        //2. A tag with CDATA is not a leaf node so it's value would be string type.\n        if(textData){\n          currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(currentNode.tagname, textData , options);\n          textData = \"\";\n        }\n\n        if (options.cdataTagName) {\n          //add cdata node\n          const childNode = new xmlNode(options.cdataTagName, currentNode, tagExp);\n          currentNode.addChild(childNode);\n          //for backtracking\n          currentNode.val = util.getValue(currentNode.val) + options.cdataPositionChar;\n          //add rest value to parent node\n          if (tagExp) {\n            childNode.val = tagExp;\n          }\n        } else {\n          currentNode.val = (currentNode.val || '') + (tagExp || '');\n        }\n\n        i = closeIndex + 2;\n      }else {//Opening tag\n        const result = closingIndexForOpeningTag(xmlData, i+1)\n        let tagExp = result.data;\n        const closeIndex = result.index;\n        const separatorIndex = tagExp.indexOf(\" \");\n        let tagName = tagExp;\n        if(separatorIndex !== -1){\n          tagName = tagExp.substr(0, separatorIndex).trimRight();\n          tagExp = tagExp.substr(separatorIndex + 1);\n        }\n\n        if(options.ignoreNameSpace){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        //save text to parent node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            currentNode.val = util.getValue(currentNode.val) + '' + processTagValue( currentNode.tagname, textData, options);\n          }\n        }\n\n        if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){//selfClosing tag\n\n          if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n            tagName = tagName.substr(0, tagName.length - 1);\n            tagExp = tagName;\n          }else{\n            tagExp = tagExp.substr(0, tagExp.length - 1);\n          }\n\n          const childNode = new xmlNode(tagName, currentNode, '');\n          if(tagName !== tagExp){\n            childNode.attrsMap = buildAttributesMap(tagExp, options);\n          }\n          currentNode.addChild(childNode);\n        }else{//opening tag\n\n          const childNode = new xmlNode( tagName, currentNode );\n          if (options.stopNodes.length && options.stopNodes.includes(childNode.tagname)) {\n            childNode.startIndex=closeIndex;\n          }\n          if(tagName !== tagExp){\n            childNode.attrsMap = buildAttributesMap(tagExp, options);\n          }\n          currentNode.addChild(childNode);\n          currentNode = childNode;\n        }\n        textData = \"\";\n        i = closeIndex;\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj;\n}\n\nfunction closingIndexForOpeningTag(data, i){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < data.length; index++) {\n    let ch = data[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === '>') {\n        return {\n          data: tagExp,\n          index: index\n        }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nexports.getTraversalObj = getTraversalObj;\n","import parser from 'fast-xml-parser';\n\nconst options = {\n  attributeNamePrefix: '',\n  ignoreAttributes: false,\n  arrayMode: true,\n};\n\nexport default {\n  parse: (xml) => parser.parse(xml, options),\n};\n","'use strict';\n\nmodule.exports = function(tagname, parent, val) {\n  this.tagname = tagname;\n  this.parent = parent;\n  this.child = {}; //child tags\n  this.attrsMap = {}; //attributes map\n  this.val = val; //text only\n  this.addChild = function(child) {\n    if (Array.isArray(this.child[child.tagname])) {\n      //already presents\n      this.child[child.tagname].push(child);\n    } else {\n      this.child[child.tagname] = [child];\n    }\n  };\n};\n","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n};\n\nconst props = ['allowBooleanAttributes'];\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = util.buildOptions(options, defaultOptions, props);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n\n  for (let i = 0; i < xmlData.length; i++) {\n    if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n\n      i++;\n      if (xmlData[i] === '?') {\n        i = readPI(xmlData, ++i);\n        if (i.err) {\n          return i;\n        }\n      } else if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"There is an unnecessary space between tag name and backward slash '</ ..'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, i));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg) {\n              return getErrorObject('InvalidTag', \"Closing tag '\"+otg+\"' is expected inplace of '\"+tagName+\"'.\", getLineNumberForPosition(xmlData, i));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else {\n            tags.push(tagName);\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else {\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if (xmlData[i] === ' ' || xmlData[i] === '\\t' || xmlData[i] === '\\n' || xmlData[i] === '\\r') {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  } else if (tags.length > 0) {\n    return getErrorObject('InvalidXml', \"Invalid '\"+JSON.stringify(tags, null, 4).replace(/\\r?\\n/g, '')+\"' found.\", 1);\n  }\n\n  return true;\n};\n\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  var start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      var tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nvar doubleQuote = '\"';\nvar singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n        continue;\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(attrStr, matches[i][0]))\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(attrStr, matches[i][0]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(attrStr, matches[i][0]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(attrStr, matches[i][0]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  var lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return lines.length;\n}\n\n//this function returns the position of the last character of match within attrStr\nfunction getPositionFromMatch(attrStr, match) {\n  return attrStr.indexOf(match) + match.length;\n}\n","'use strict';\n\nconst nodeToJson = require('./node2json');\nconst xmlToNodeobj = require('./xmlstr2xmlnode');\nconst x2xmlnode = require('./xmlstr2xmlnode');\nconst buildOptions = require('./util').buildOptions;\nconst validator = require('./validator');\n\nexports.parse = function(xmlData, options, validationOption) {\n  if( validationOption){\n    if(validationOption === true) validationOption = {}\n    \n    const result = validator.validate(xmlData, validationOption);\n    if (result !== true) {\n      throw Error( result.err.msg)\n    }\n  }\n  options = buildOptions(options, x2xmlnode.defaultOptions, x2xmlnode.props);\n  const traversableObj = xmlToNodeobj.getTraversalObj(xmlData, options)\n  //print(traversableObj, \"  \");\n  return nodeToJson.convertToJson(traversableObj, options);\n};\nexports.convertTonimn = require('../src/nimndata').convert2nimn;\nexports.getTraversalObj = xmlToNodeobj.getTraversalObj;\nexports.convertToJson = nodeToJson.convertToJson;\nexports.convertToJsonString = require('./node2json_str').convertToJsonString;\nexports.validate = validator.validate;\nexports.j2xParser = require('./json2xml');\nexports.parseToNimn = function(xmlData, schema, options) {\n  return exports.convertTonimn(exports.getTraversalObj(xmlData, options), schema, options);\n};\n\n\nfunction print(xmlNode, indentation){\n  if(xmlNode){\n    console.log(indentation + \"{\")\n    console.log(indentation + \"  \\\"tagName\\\": \\\"\" + xmlNode.tagname + \"\\\", \");\n    if(xmlNode.parent){\n      console.log(indentation + \"  \\\"parent\\\": \\\"\" + xmlNode.parent.tagname  + \"\\\", \");\n    }\n    console.log(indentation + \"  \\\"val\\\": \\\"\" + xmlNode.val  + \"\\\", \");\n    console.log(indentation + \"  \\\"attrs\\\": \" + JSON.stringify(xmlNode.attrsMap,null,4)  + \", \");\n\n    if(xmlNode.child){\n      console.log(indentation + \"\\\"child\\\": {\")\n      const indentation2 = indentation + indentation;\n      Object.keys(xmlNode.child).forEach( function(key) {\n        const node = xmlNode.child[key];\n\n        if(Array.isArray(node)){\n          console.log(indentation +  \"\\\"\"+key+\"\\\" :[\")\n          node.forEach( function(item,index) {\n            //console.log(indentation + \" \\\"\"+index+\"\\\" : [\")\n            print(item, indentation2);\n          })\n          console.log(indentation + \"],\")  \n        }else{\n          console.log(indentation + \" \\\"\"+key+\"\\\" : {\")\n          print(node, indentation2);\n          console.log(indentation + \"},\")  \n        }\n      });\n      console.log(indentation + \"},\")\n    }\n    console.log(indentation + \"},\")\n  }\n}","'use strict';\n\nconst util = require('./util');\n\nconst convertToJson = function(node, options) {\n  const jObj = {};\n\n  //when no child node or attr is present\n  if ((!node.child || util.isEmptyObject(node.child)) && (!node.attrsMap || util.isEmptyObject(node.attrsMap))) {\n    return util.isExist(node.val) ? node.val : '';\n  } else {\n    //otherwise create a textnode if node has some text\n    if (util.isExist(node.val)) {\n      if (!(typeof node.val === 'string' && (node.val === '' || node.val === options.cdataPositionChar))) {\n        if(options.arrayMode === \"strict\"){\n          jObj[options.textNodeName] = [ node.val ];\n        }else{\n          jObj[options.textNodeName] = node.val;\n        }\n      }\n    }\n  }\n\n  util.merge(jObj, node.attrsMap, options.arrayMode);\n\n  const keys = Object.keys(node.child);\n  for (let index = 0; index < keys.length; index++) {\n    var tagname = keys[index];\n    if (node.child[tagname] && node.child[tagname].length > 1) {\n      jObj[tagname] = [];\n      for (var tag in node.child[tagname]) {\n        jObj[tagname].push(convertToJson(node.child[tagname][tag], options));\n      }\n    } else {\n      if(options.arrayMode === true){\n        const result = convertToJson(node.child[tagname][0], options)\n        if(typeof result === 'object')\n          jObj[tagname] = [ result ];\n        else\n          jObj[tagname] = result;\n      }else if(options.arrayMode === \"strict\"){\n        jObj[tagname] = [convertToJson(node.child[tagname][0], options) ];\n      }else{\n        jObj[tagname] = convertToJson(node.child[tagname][0], options);\n      }\n    }\n  }\n\n  //add value\n  return jObj;\n};\n\nexports.convertToJson = convertToJson;\n","'use strict';\n//parse Empty Node as self closing node\nconst buildOptions = require('./util').buildOptions;\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attrNodeName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataTagName: false,\n  cdataPositionChar: '\\\\c',\n  format: false,\n  indentBy: '  ',\n  supressEmptyNode: false,\n  tagValueProcessor: function(a) {\n    return a;\n  },\n  attrValueProcessor: function(a) {\n    return a;\n  },\n};\n\nconst props = [\n  'attributeNamePrefix',\n  'attrNodeName',\n  'textNodeName',\n  'ignoreAttributes',\n  'cdataTagName',\n  'cdataPositionChar',\n  'format',\n  'indentBy',\n  'supressEmptyNode',\n  'tagValueProcessor',\n  'attrValueProcessor',\n];\n\nfunction Parser(options) {\n  this.options = buildOptions(options, defaultOptions, props);\n  if (this.options.ignoreAttributes || this.options.attrNodeName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n  if (this.options.cdataTagName) {\n    this.isCDATA = isCDATA;\n  } else {\n    this.isCDATA = function(/*a*/) {\n      return false;\n    };\n  }\n  this.replaceCDATAstr = replaceCDATAstr;\n  this.replaceCDATAarr = replaceCDATAarr;\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n\n  if (this.options.supressEmptyNode) {\n    this.buildTextNode = buildEmptyTextNode;\n    this.buildObjNode = buildEmptyObjNode;\n  } else {\n    this.buildTextNode = buildTextValNode;\n    this.buildObjNode = buildObjectNode;\n  }\n\n  this.buildTextValNode = buildTextValNode;\n  this.buildObjectNode = buildObjectNode;\n}\n\nParser.prototype.parse = function(jObj) {\n  return this.j2x(jObj, 0).val;\n};\n\nParser.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  const keys = Object.keys(jObj);\n  const len = keys.length;\n  for (let i = 0; i < len; i++) {\n    const key = keys[i];\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node\n    } else if (jObj[key] === null) {\n      val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += ' ' + attr + '=\"' + this.options.attrValueProcessor('' + jObj[key]) + '\"';\n      } else if (this.isCDATA(key)) {\n        if (jObj[this.options.textNodeName]) {\n          val += this.replaceCDATAstr(jObj[this.options.textNodeName], jObj[key]);\n        } else {\n          val += this.replaceCDATAstr('', jObj[key]);\n        }\n      } else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          if (jObj[this.options.cdataTagName]) {\n            //value will added while processing cdata\n          } else {\n            val += this.options.tagValueProcessor('' + jObj[key]);\n          }\n        } else {\n          val += this.buildTextNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      if (this.isCDATA(key)) {\n        val += this.indentate(level);\n        if (jObj[this.options.textNodeName]) {\n          val += this.replaceCDATAarr(jObj[this.options.textNodeName], jObj[key]);\n        } else {\n          val += this.replaceCDATAarr('', jObj[key]);\n        }\n      } else {\n        //nested nodes\n        const arrLen = jObj[key].length;\n        for (let j = 0; j < arrLen; j++) {\n          const item = jObj[key][j];\n          if (typeof item === 'undefined') {\n            // supress undefined node\n          } else if (item === null) {\n            val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          } else if (typeof item === 'object') {\n            const result = this.j2x(item, level + 1);\n            val += this.buildObjNode(result.val, key, result.attrStr, level);\n          } else {\n            val += this.buildTextNode(item, key, '', level);\n          }\n        }\n      }\n    } else {\n      //nested node\n      if (this.options.attrNodeName && key === this.options.attrNodeName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += ' ' + Ks[j] + '=\"' + this.options.attrValueProcessor('' + jObj[key][Ks[j]]) + '\"';\n        }\n      } else {\n        const result = this.j2x(jObj[key], level + 1);\n        val += this.buildObjNode(result.val, key, result.attrStr, level);\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nfunction replaceCDATAstr(str, cdata) {\n  str = this.options.tagValueProcessor('' + str);\n  if (this.options.cdataPositionChar === '' || str === '') {\n    return str + '<![CDATA[' + cdata + ']]' + this.tagEndChar;\n  } else {\n    return str.replace(this.options.cdataPositionChar, '<![CDATA[' + cdata + ']]' + this.tagEndChar);\n  }\n}\n\nfunction replaceCDATAarr(str, cdata) {\n  str = this.options.tagValueProcessor('' + str);\n  if (this.options.cdataPositionChar === '' || str === '') {\n    return str + '<![CDATA[' + cdata.join(']]><![CDATA[') + ']]' + this.tagEndChar;\n  } else {\n    for (let v in cdata) {\n      str = str.replace(this.options.cdataPositionChar, '<![CDATA[' + cdata[v] + ']]>');\n    }\n    return str + this.newLine;\n  }\n}\n\nfunction buildObjectNode(val, key, attrStr, level) {\n  if (attrStr && !val.includes('<')) {\n    return (\n      this.indentate(level) +\n      '<' +\n      key +\n      attrStr +\n      '>' +\n      val +\n      //+ this.newLine\n      // + this.indentate(level)\n      '</' +\n      key +\n      this.tagEndChar\n    );\n  } else {\n    return (\n      this.indentate(level) +\n      '<' +\n      key +\n      attrStr +\n      this.tagEndChar +\n      val +\n      //+ this.newLine\n      this.indentate(level) +\n      '</' +\n      key +\n      this.tagEndChar\n    );\n  }\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    return this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n    //+ this.newLine\n  }\n}\n\nfunction buildTextValNode(val, key, attrStr, level) {\n  return (\n    this.indentate(level) +\n    '<' +\n    key +\n    attrStr +\n    '>' +\n    this.options.tagValueProcessor(val) +\n    '</' +\n    key +\n    this.tagEndChar\n  );\n}\n\nfunction buildEmptyTextNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildTextValNode(val, key, attrStr, level);\n  } else {\n    return this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n  }\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix)) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nfunction isCDATA(name) {\n  return name === this.options.cdataTagName;\n}\n\n//formatting\n//indentation\n//\\n after each closing or self closing tag\n\nmodule.exports = Parser;\n","'use strict';\n\nconst util = require('./util');\nconst buildOptions = require('./util').buildOptions;\nconst x2j = require('./xmlstr2xmlnode');\n\n//TODO: do it later\nconst convertToJsonString = function(node, options) {\n  options = buildOptions(options, x2j.defaultOptions, x2j.props);\n\n  options.indentBy = options.indentBy || '';\n  return _cToJsonStr(node, options, 0);\n};\n\nconst _cToJsonStr = function(node, options, level) {\n  let jObj = '{';\n\n  //traver through all the children\n  const keys = Object.keys(node.child);\n\n  for (let index = 0; index < keys.length; index++) {\n    var tagname = keys[index];\n    if (node.child[tagname] && node.child[tagname].length > 1) {\n      jObj += '\"' + tagname + '\" : [ ';\n      for (var tag in node.child[tagname]) {\n        jObj += _cToJsonStr(node.child[tagname][tag], options) + ' , ';\n      }\n      jObj = jObj.substr(0, jObj.length - 1) + ' ] '; //remove extra comma in last\n    } else {\n      jObj += '\"' + tagname + '\" : ' + _cToJsonStr(node.child[tagname][0], options) + ' ,';\n    }\n  }\n  util.merge(jObj, node.attrsMap);\n  //add attrsMap as new children\n  if (util.isEmptyObject(jObj)) {\n    return util.isExist(node.val) ? node.val : '';\n  } else {\n    if (util.isExist(node.val)) {\n      if (!(typeof node.val === 'string' && (node.val === '' || node.val === options.cdataPositionChar))) {\n        jObj += '\"' + options.textNodeName + '\" : ' + stringval(node.val);\n      }\n    }\n  }\n  //add value\n  if (jObj[jObj.length - 1] === ',') {\n    jObj = jObj.substr(0, jObj.length - 2);\n  }\n  return jObj + '}';\n};\n\nfunction stringval(v) {\n  if (v === true || v === false || !isNaN(v)) {\n    return v;\n  } else {\n    return '\"' + v + '\"';\n  }\n}\n\nfunction indentate(options, level) {\n  return options.indentBy.repeat(level);\n}\n\nexports.convertToJsonString = convertToJsonString;\n","'use strict';\nconst char = function(a) {\n  return String.fromCharCode(a);\n};\n\nconst chars = {\n  nilChar: char(176),\n  missingChar: char(201),\n  nilPremitive: char(175),\n  missingPremitive: char(200),\n\n  emptyChar: char(178),\n  emptyValue: char(177), //empty Premitive\n\n  boundryChar: char(179),\n\n  objStart: char(198),\n  arrStart: char(204),\n  arrayEnd: char(185),\n};\n\nconst charsArr = [\n  chars.nilChar,\n  chars.nilPremitive,\n  chars.missingChar,\n  chars.missingPremitive,\n  chars.boundryChar,\n  chars.emptyChar,\n  chars.emptyValue,\n  chars.arrayEnd,\n  chars.objStart,\n  chars.arrStart,\n];\n\nconst _e = function(node, e_schema, options) {\n  if (typeof e_schema === 'string') {\n    //premitive\n    if (node && node[0] && node[0].val !== undefined) {\n      return getValue(node[0].val, e_schema);\n    } else {\n      return getValue(node, e_schema);\n    }\n  } else {\n    const hasValidData = hasData(node);\n    if (hasValidData === true) {\n      let str = '';\n      if (Array.isArray(e_schema)) {\n        //attributes can't be repeated. hence check in children tags only\n        str += chars.arrStart;\n        const itemSchema = e_schema[0];\n        //var itemSchemaType = itemSchema;\n        const arr_len = node.length;\n\n        if (typeof itemSchema === 'string') {\n          for (let arr_i = 0; arr_i < arr_len; arr_i++) {\n            const r = getValue(node[arr_i].val, itemSchema);\n            str = processValue(str, r);\n          }\n        } else {\n          for (let arr_i = 0; arr_i < arr_len; arr_i++) {\n            const r = _e(node[arr_i], itemSchema, options);\n            str = processValue(str, r);\n          }\n        }\n        str += chars.arrayEnd; //indicates that next item is not array item\n      } else {\n        //object\n        str += chars.objStart;\n        const keys = Object.keys(e_schema);\n        if (Array.isArray(node)) {\n          node = node[0];\n        }\n        for (let i in keys) {\n          const key = keys[i];\n          //a property defined in schema can be present either in attrsMap or children tags\n          //options.textNodeName will not present in both maps, take it's value from val\n          //options.attrNodeName will be present in attrsMap\n          let r;\n          if (!options.ignoreAttributes && node.attrsMap && node.attrsMap[key]) {\n            r = _e(node.attrsMap[key], e_schema[key], options);\n          } else if (key === options.textNodeName) {\n            r = _e(node.val, e_schema[key], options);\n          } else {\n            r = _e(node.child[key], e_schema[key], options);\n          }\n          str = processValue(str, r);\n        }\n      }\n      return str;\n    } else {\n      return hasValidData;\n    }\n  }\n};\n\nconst getValue = function(a /*, type*/) {\n  switch (a) {\n    case undefined:\n      return chars.missingPremitive;\n    case null:\n      return chars.nilPremitive;\n    case '':\n      return chars.emptyValue;\n    default:\n      return a;\n  }\n};\n\nconst processValue = function(str, r) {\n  if (!isAppChar(r[0]) && !isAppChar(str[str.length - 1])) {\n    str += chars.boundryChar;\n  }\n  return str + r;\n};\n\nconst isAppChar = function(ch) {\n  return charsArr.indexOf(ch) !== -1;\n};\n\nfunction hasData(jObj) {\n  if (jObj === undefined) {\n    return chars.missingChar;\n  } else if (jObj === null) {\n    return chars.nilChar;\n  } else if (\n    jObj.child &&\n    Object.keys(jObj.child).length === 0 &&\n    (!jObj.attrsMap || Object.keys(jObj.attrsMap).length === 0)\n  ) {\n    return chars.emptyChar;\n  } else {\n    return true;\n  }\n}\n\nconst x2j = require('./xmlstr2xmlnode');\nconst buildOptions = require('./util').buildOptions;\n\nconst convert2nimn = function(node, e_schema, options) {\n  options = buildOptions(options, x2j.defaultOptions, x2j.props);\n  return _e(node, e_schema, options);\n};\n\nexports.convert2nimn = convert2nimn;\n","'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if(arrayMode === 'strict'){\n        target[keys[i]] = [ a[keys[i]] ];\n      }else{\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.buildOptions = function(options, defaultOptions, props) {\n  var newOptions = {};\n  if (!options) {\n    return defaultOptions; //if there are not options\n  }\n\n  for (let i = 0; i < props.length; i++) {\n    if (options[props[i]] !== undefined) {\n      newOptions[props[i]] = options[props[i]];\n    } else {\n      newOptions[props[i]] = defaultOptions[props[i]];\n    }\n  }\n  return newOptions;\n};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n"],"sourceRoot":""}